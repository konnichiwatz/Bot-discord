// Jimmy Lionez

const { Client, GatewayIntentBits, Partials, Events, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, MessageFlags } = require('discord.js');
const config = require('./config.json');
const Logger = require('./utils/logger');
const FormLogger = require('./formLogger');
const formLogger = new FormLogger();

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages],
  partials: [Partials.Channel]
});

const logger = new Logger(client, config.channelId);

client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${client.user.tag}`);

  const channel = await client.channels.fetch(config.channelId);

  // ‡∏à‡∏±‡∏ö Error ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô Discord ‡∏ú‡πà‡∏≤‡∏ô Logger
process.on('unhandledRejection', async (reason, promise) => {
  console.error('üí• Unhandled Rejection:', reason);
  await logger.sendErrorMessage(reason, 'Unhandled Promise Rejection');
});

client.on('error', async (error) => {
  console.error('üí• Client Error:', error);
  await logger.sendErrorMessage(error.message, 'Client Error');
});

// üî• ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
const messages = await channel.messages.fetch({ limit: 100 });
const botMessages = messages.filter(msg => msg.author.id === client.user.id);

if (botMessages.size > 0) {
  try {
    const deleted = await channel.bulkDelete(botMessages, true);
    console.log(`üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡πâ‡∏ß (${deleted.size} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)`);
    await logger.sendStartupMessage();
    await logger.sendInfoMessage(`üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${deleted.size} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó:', err);
    await logger.sendErrorMessage(err.message, '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  }
} else {
  console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á');
  await logger.sendStartupMessage();
  await logger.sendInfoMessage('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ');
}


  const embed = new EmbedBuilder()
    .setThumbnail('...') // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    .setTitle('üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö Whitelist  Fill in the information to receive Whitelist')
    .setDescription('\`\`\`\n ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Admin ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Whitelist ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ \n\`\`\` \`\`\`\n After completing the form, please wait a moment for the Admin to review your information. Once approved, you will receive the Whitelist immediately. \n\`\`\`')
    .setColor(0x00AE86)
    .setFooter({ text: 'Powered by Jimmy Lionez (Admin_Jimmy)' })
    .setImage('...'); // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

  const button = new ButtonBuilder()
    .setCustomId('whitelistBtn')
    .setLabel('üì® ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Whitelist')
    .setStyle(ButtonStyle.Primary);

  const row = new ActionRowBuilder().addComponents(button);

  await channel.send({ embeds: [embed], components: [row] });
  });

client.on(Events.InteractionCreate, async interaction => {
  
  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  if (interaction.isButton() && interaction.customId === 'whitelistBtn') {
    const modal = new ModalBuilder()
      .setCustomId('whitelistModal')
      .setTitle('**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Whitelist**');

    const ignInput = new TextInputBuilder()
      .setCustomId('ign')
      .setLabel('‡∏ä‡∏∑‡πà‡∏≠ IC / Name IC')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const ageInput = new TextInputBuilder()
      .setCustomId('age')
      .setLabel('‡∏≠‡∏≤‡∏¢‡∏∏ / Age')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const genderInput = new TextInputBuilder()
      .setCustomId('gender')
      .setLabel('‡πÄ‡∏û‡∏® / Gender (Male, Female , Other)')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const steamhexInput = new TextInputBuilder()
      .setCustomId('steamhex')
      .setLabel('Steam HEX (steam:xxxxxxxxxxx)')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

// Jimmy Lionez

    const row1 = new ActionRowBuilder().addComponents(ignInput);
    const row2 = new ActionRowBuilder().addComponents(ageInput);
    const row3 = new ActionRowBuilder().addComponents(genderInput);
    const row4 = new ActionRowBuilder().addComponents(steamhexInput);

    modal.addComponents(row1, row2, row3, row4);
    await interaction.showModal(modal);
  }

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°

  if (interaction.isModalSubmit() && interaction.customId === 'whitelistModal') {
  const ign = interaction.fields.getTextInputValue('ign');
  const age = interaction.fields.getTextInputValue('age');
  const gender = interaction.fields.getTextInputValue('gender');
  const steamhex = interaction.fields.getTextInputValue('steamhex');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ign ‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (ign.trim().length < 3) {
  return interaction.reply({ content: '\`\`\`\n ‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ IC ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ !! \n\`\`\`  \`\`\`\n ‚ùå Please enter the IC name with at least 3 characters !! \n\`\`\` ', flags: MessageFlags.Ephemeral });
}

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ age ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  if (!/^\d+$/.test(age)) {
    return interaction.reply({ content: '\`\`\`\n ‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô !! \n\`\`\`  \`\`\`\n ‚ùå Please enter age as numbers only !! \n\`\`\` ', flags: MessageFlags.Ephemeral });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö gender ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Male, Female, ‡∏´‡∏£‡∏∑‡∏≠ Other ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (case-insensitive)
  if (!/^(male|female|other|m|f|o)$/i.test(gender)) {
    return interaction.reply({ content: '\`\`\`\n ‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡πÄ‡∏õ‡πá‡∏ô Male, Female ‡∏´‡∏£‡∏∑‡∏≠ Other ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô !! \n\`\`\`  \`\`\`\n ‚ùå Please enter gender as Male, Female, or Other only !! \n\`\`\` ', flags: MessageFlags.Ephemeral });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö steamhex ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô steam:xxxxx ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (case-insensitive)
  if (!/^(steam:([0-9a-f]{14,20}))$/i.test(steamhex)) {
    return interaction.reply({ content: '\`\`\`\n ‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÄ‡∏õ‡πá‡∏ô steam:xxxxx ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô !! \n\`\`\`  \`\`\`\n ‚ùå Please enter the stream as steam:xxxxx only !! \n\`\`\` ', flags: MessageFlags.Ephemeral });
  }

  // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô validation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      
    // --- ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ---
    formLogger.logFormSubmission({
      userId: interaction.user.id,
      ign,
      age,
      gender,
      steamhex
    });
  // ...
}
// Jimmy Lionez
  if (interaction.isModalSubmit() && interaction.customId === 'whitelistModal') {
    const ign = interaction.fields.getTextInputValue('ign');
    const age = interaction.fields.getTextInputValue('age');
    const gender = interaction.fields.getTextInputValue('gender');
    const steamhex = interaction.fields.getTextInputValue('steamhex');

    const embed = new EmbedBuilder()
  .setTitle('üìã ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Whitelist')
  .setColor(0x00AE86)
  .addFields(
    {
      name: '**üë§ Discord ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£**',
      value: `**<@${interaction.user.id}>**`,
      inline: false,
    },
    {
      name: '**üéÆ ‡∏ä‡∏∑‡πà‡∏≠ IC**',
      value: `\`\`\`\n${ign}\n\`\`\``,
      inline: false,
    },
    {
      name: '**üßì ‡∏≠‡∏≤‡∏¢‡∏∏**',
      value: `\`\`\`\n${age}\n\`\`\``,
      inline: false,
    },
    {
      name: '**üßë‚Äçü§ù‚Äçüßë ‡πÄ‡∏û‡∏®**',
      value: `\`\`\`\n${gender}\n\`\`\``,
      inline: false,
    },
    {
      name: '**üåê Steam HEX**',
      value: `\`\`\`\n${steamhex}\n\`\`\``,
      inline: false,
    }
  )
  .setTimestamp()
  .setFooter({ text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Whitelist ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' });

   // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥
  const reportChannel = await client.channels.fetch(config.whitelistReportChannelId);

  await reportChannel.send({
    content: `<@&...> <@&...> <@&...> <@&...>`, // ‡πÉ‡∏™‡πà role ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ mention
    embeds: [embed]
  });

    // ‡πÉ‡∏´‡πâ Role (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (config.roleId) {
      const member = await interaction.guild.members.fetch(interaction.user.id);
      await member.roles.add(config.roleId);
    }

    await interaction.reply({ content: '\`\`\`\n ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì! \n\`\`\`  \`\`\`\n ‚úÖYour form has been submitted successfully. Thank you! \n\`\`\` ', flags: MessageFlags.Ephemeral });
  }
});

client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isModalSubmit() && interaction.customId === 'whitelistModal') {
    const ign = interaction.fields.getTextInputValue('ign');
    const age = interaction.fields.getTextInputValue('age');
    const gender = interaction.fields.getTextInputValue('gender');
    const steamhex = interaction.fields.getTextInputValue('steamhex');

    // ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô validate, ‡∏™‡πà‡∏á embed, ‡∏ï‡∏≠‡∏ö interaction ...
  }
});

client.login(config.token);

// ‡πÅ‡∏à‡πâ‡∏á Error ‡∏à‡∏≤‡∏Å process ‡∏´‡∏£‡∏∑‡∏≠ unhandled promise
process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection:', reason);
  // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Discord
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö log ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
});

client.on('error', (error) => {
  console.error('üí• Client Error:', error);
  // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Discord
});

// Jimmy Lionez